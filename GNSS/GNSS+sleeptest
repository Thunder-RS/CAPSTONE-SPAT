#include <zephyr/kernel.h>
#include <zephyr/logging/log.h>
#include <nrf_modem_gnss.h>
#include <dk_buttons_and_leds.h>
#include <modem/lte_lc.h>
#include <modem/nrf_modem_lib.h>
#include <nrf_modem.h>
#include <net/nrf_cloud_agnss.h>
#include <stdio.h>
#include <ncs_version.h>

LOG_MODULE_REGISTER(Lesson6_Exercise1, LOG_LEVEL_DBG);

static struct nrf_modem_gnss_pvt_data_frame pvt_data;
static int64_t gnss_start_time;
static bool first_fix = false;
static K_SEM_DEFINE(lte_connected, 0, 1);
static bool gnss_active = false; // Track GNSS state

#define GNSS_TIMEOUT_MS (5 * 60 * 1000) // 5 minutes in milliseconds
#define SLEEP_DURATION_MS (20 * 60 * 1000) // 20 minutes in milliseconds

static void print_fix_data(struct nrf_modem_gnss_pvt_data_frame *pvt_data)
{
    LOG_INF("Latitude:  %.6f", pvt_data->latitude);
    LOG_INF("Longitude: %.6f", pvt_data->longitude);
    LOG_INF("Altitude:  %.1f m", (double)pvt_data->altitude);
    LOG_INF("Time (UTC): %02d:%02d:%02d.%03d",
            pvt_data->datetime.hour, pvt_data->datetime.minute,
            pvt_data->datetime.seconds, pvt_data->datetime.ms);
}

static void enter_sleep_mode(void)
{
    int err;

    LOG_INF("Moving to data");
    dk_set_led_off(DK_LED1); // Turn off LED to save power

    // Stop GNSS to save power
    if (gnss_active) {
        err = nrf_modem_gnss_stop();
        if (err) {
            LOG_ERR("Failed to stop GNSS, err %d", err);
        } else {
            gnss_active = false;
        }
    }

    // Optionally, deactivate GNSS functional mode
    err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_DEACTIVATE_GNSS);
    if (err) {
        LOG_ERR("Failed to deactivate GNSS, err %d", err);
    }

    // Enter system sleep (low power mode)
    LOG_INF("Entering sleep for %d minutes", SLEEP_DURATION_MS / 60000);
    k_msleep(SLEEP_DURATION_MS);

    // After waking up, restart GNSS
    LOG_INF("Waking up, restarting GNSS");
    err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_ACTIVATE_GNSS);
    if (err) {
        LOG_ERR("Failed to activate GNSS, err %d", err);
        return;
    }

    err = nrf_modem_gnss_start();
    if (err) {
        LOG_ERR("Failed to start GNSS, err %d", err);
        return;
    }

    gnss_start_time = k_uptime_get();
    gnss_active = true;
}

static void gnss_event_handler(int event)
{
    int err;
    static struct nrf_modem_gnss_agnss_data_frame agnss_request;

    // Check for GNSS timeout
    if (gnss_active && (k_uptime_get() - gnss_start_time) >= GNSS_TIMEOUT_MS) {
        LOG_INF("GNSS fix timeout after %d minutes", GNSS_TIMEOUT_MS / 60000);
        enter_sleep_mode();
        return;
    }

    switch (event) {
    case NRF_MODEM_GNSS_EVT_PVT:
        LOG_INF("Searching...");
        int num_satellites = 0;
        for (int i = 0; i < 12; i++) {
            if (pvt_data.sv[i].signal != 0) {
                LOG_INF("sv: %d, cn0: %d, signal: %d, elev: %d, azim: %d",
                        pvt_data.sv[i].sv, pvt_data.sv[i].cn0, pvt_data.sv[i].signal,
                        pvt_data.sv[i].elevation, pvt_data.sv[i].azimuth);
                num_satellites++;
            }
        }
        LOG_INF("Number of current satellites: %d", num_satellites);
        err = nrf_modem_gnss_read(&pvt_data, sizeof(pvt_data), NRF_MODEM_GNSS_DATA_PVT);
        if (err) {
            LOG_ERR("nrf_modem_gnss_read failed, err %d", err);
            return;
        }
        LOG_INF("PVT flags: 0x%08x", pvt_data.flags);
        if (pvt_data.flags & NRF_MODEM_GNSS_PVT_FLAG_FIX_VALID) {
            dk_set_led_on(DK_LED1);
            print_fix_data(&pvt_data);
            if (!first_fix) {
                LOG_INF("Time to first fix: %.1f s",
                        (k_uptime_get() - gnss_start_time) / 1000.0);
                first_fix = true;
            }
        } else {
            LOG_INF("No valid fix");
        }
        break;

    case NRF_MODEM_GNSS_EVT_AGNSS_REQ:
        LOG_INF("A-GNSS data needed");
        err = nrf_modem_gnss_read(&agnss_request, sizeof(agnss_request), NRF_MODEM_GNSS_DATA_AGNSS_REQ);
        if (err) {
            LOG_ERR("Failed to read A-GNSS request, err %d", err);
            return;
        }
        err = nrf_cloud_agnss_request(&agnss_request);
        if (err) {
            LOG_ERR("Failed to request A-GNSS data, err %d", err);
            return;
        }
        LOG_INF("A-GNSS request sent to nRF Cloud");
        break;

    case NRF_MODEM_GNSS_EVT_FIX:
        LOG_INF("GNSS fix event received");
        break;

    case NRF_MODEM_GNSS_EVT_NMEA:
        LOG_INF("NMEA data received");
        break;

    case NRF_MODEM_GNSS_EVT_PERIODIC_WAKEUP:
        LOG_INF("GNSS has woken up");
        break;

    case NRF_MODEM_GNSS_EVT_SLEEP_AFTER_FIX:
        LOG_INF("GNSS enter sleep after fix");
        break;

    default:
        LOG_INF("Unhandled GNSS event: %d", event);
        break;
    }
}

static void lte_handler(const struct lte_lc_evt *const evt)
{
    switch (evt->type) {
    case LTE_LC_EVT_NW_REG_STATUS:
        if (evt->nw_reg_status == LTE_LC_NW_REG_REGISTERED_HOME ||
            evt->nw_reg_status == LTE_LC_NW_REG_REGISTERED_ROAMING) {
            LOG_INF("LTE network registered");
            k_sem_give(lte_connected);
        }
        break;

    default:
        break;
    }
}

static int modem_configure(void)
{
    int err;

    err = nrf_modem_lib_init();
    if (err) {
        LOG_ERR("Failed to initialize modem library, err %d", err);
        return err;
    }

    err = lte_lc_connect();
    if (err) {
        LOG_ERR("Failed to initialize LTE, err %d", err);
        return err;
    }

    err = lte_lc_psm_req(true);
    if (err) {
        LOG_ERR("Failed to request PSM, err %d", err);
    }

    err = lte_lc_edrx_req(true);
    if (err) {
        LOG_ERR("Failed to request eDRX, err %d", err);
    }

    lte_lc_register_handler(lte_handler);
    err = lte_lc_connect();
    if (err) {
        LOG_ERR("Failed to connect to LTE, err %d", err);
        return err;
    }

    return 0;
}

int main(void)
{
    int err;

    err = dk_leds_init();
    if (err) {
        LOG_ERR("Failed to initialize LEDs, err %d", err);
        return err;
    }

    err = modem_configure();
    if (err) {
        LOG_ERR("Failed to configure modem, err %d", err);
        return err;
    }

    LOG_INF("Waiting for LTE connection...");
    k_sem_take(lte_connected, K_FOREVER);
    LOG_INF("LTE connected");

    err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_ACTIVATE_GNSS);
    if (err) {
        LOG_ERR("Failed to activate GNSS, err %d", err);
        return err;
    }

    err = nrf_modem_gnss_event_handler_set(gnss_event_handler);
    if (err) {
        LOG_ERR("Failed to set GNSS event handler, err %d", err);
        return err;
    }

    err = nrf_modem_gnss_fix_interval_set(1);
    if (err) {
        LOG_ERR("Failed to set GNSS fix interval, err %d", err);
        return err;
    }

    err = nrf_modem_gnss_fix_retry_set(10);
    if (err) {
        LOG_ERR("Failed to set GNSS fix retry, err %d", err);
        return err;
    }

    err = nrf_modem_gnss_start();
    if (err) {
        LOG_ERR("Failed to start GNSS, err %d", err);
        return err;
    }

    gnss_start_time = k_uptime_get();
    gnss_active = true;
    LOG_INF("Starting GNSS");
    return 0;
}
