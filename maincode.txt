//header files for i2c, logging and other stuff
#include <zephyr/kernel.h>
#include <zephyr/device.h>
#include <zephyr/drivers/sensor.h>
#include <zephyr/logging/log.h>

// enable log
LOG_MODULE_REGISTER(sensor_app, LOG_LEVEL_INF);

// function to read from BME280 sensor using zephyr driver 
void read_bme280(const struct device *bme280) {
    struct sensor_value temp, humidity;
    //fetch device 
    sensor_sample_fetch(bme280);
    //fetch data 
    sensor_channel_get(bme280, SENSOR_CHAN_AMBIENT_TEMP, &temp);
    sensor_channel_get(bme280, SENSOR_CHAN_HUMIDITY, &humidity);
    //write data to serial terminal with time stamp 
    LOG_INF("BME280 - Temp: %d.%06d Â°C, Humidity: %d.%06d %%", 
            temp.val1, temp.val2, humidity.val1, humidity.val2);
}

// Function to read apds9960 sensor 
void read_apds9960_light(const struct device *apds) {
    struct sensor_value light;
    // fetch device
    sensor_sample_fetch(apds);
    // get light sensor data
    sensor_channel_get(apds, SENSOR_CHAN_LIGHT, &light);
    // print data to serial terminal with time stamp 
    LOG_INF("APDS9960 - Ambient Light: %d.%06d lux", light.val1, light.val2);
}

void main(void) {

    const struct device *bme280 = DEVICE_DT_GET_ANY(bosch_bme280);
    const struct device *apds = DEVICE_DT_GET_ANY(avago_apds9960);
    
    //print device not ready if fails 
    if (!device_is_ready(bme280)) {
        LOG_ERR("BME280 not ready");
        return;
    }
    if (!device_is_ready(apds)) {
        LOG_ERR("APDS-9960 not ready");
        return;
    }
    // while true, fetch from bme280 and apds by calling functions and then sleep for 5 seconds. 
    while (1) {
        read_bme280(bme280);
        read_apds9960_light(apds);
        k_sleep(K_SECONDS(5));
    }
}
