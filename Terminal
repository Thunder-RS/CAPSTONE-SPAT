#include <zephyr/kernel.h>
#include <zephyr/logging/log.h>
#include <modem/lte_lc.h>
#include <modem/nrf_modem_lib.h>
#include <net/nrf_cloud.h>
#include <net/nrf_cloud_rest.h>
#include <cJSON.h>

LOG_MODULE_REGISTER(nrf_cloud_terminal, LOG_LEVEL_INF);

#define DEFAULT_TEMP_THRESHOLD 69  // Default temperature threshold in Fahrenheit
#define DEFAULT_HUM_THRESHOLD 49   // Default humidity threshold in percent

static int temp_threshold = DEFAULT_TEMP_THRESHOLD;
static int hum_threshold = DEFAULT_HUM_THRESHOLD;

/* Function to send acknowledgment back to nRF Cloud */
static void send_ack_to_cloud(const char *message) {
    struct nrf_cloud_rest_context rest_ctx = {
        .connect_socket = -1,
        .keep_alive = false
    };

    char json_msg[128];
    snprintf(json_msg, sizeof(json_msg),
             "{\"appId\":\"TERMINAL\",\"messageType\":\"ACK\",\"data\":\"%s\"}", message);

    int ret = nrf_cloud_rest_send_device_message(&rest_ctx, CONFIG_NRF_CLOUD_CLIENT_ID, json_msg, false, NULL);
    if (ret) {
        LOG_ERR("Failed to send ACK: %d", ret);
    } else {
        LOG_INF("ACK sent: %s", message);
    }
}

/* Function to process incoming messages from nRF Cloud */
static void process_terminal_message(const char *message) {
    cJSON *json = cJSON_Parse(message);
    if (!json) {
        LOG_ERR("Invalid JSON received");
        return;
    }

    cJSON *appId = cJSON_GetObjectItem(json, "appId");
    cJSON *msgType = cJSON_GetObjectItem(json, "messageType");
    cJSON *data = cJSON_GetObjectItem(json, "data");

    if (!cJSON_IsString(appId) || !cJSON_IsString(msgType) || !cJSON_IsString(data)) {
        LOG_ERR("Invalid message format");
        cJSON_Delete(json);
        return;
    }

    if (strcmp(appId->valuestring, "TERMINAL") == 0 && strcmp(msgType->valuestring, "CMD") == 0) {
        LOG_INF("Received command: %s", data->valuestring);

        if (strncmp(data->valuestring, "SET TEMP_THRESHOLD ", 19) == 0) {
            temp_threshold = atoi(data->valuestring + 19);
            LOG_INF("Updated temperature threshold: %dÂ°F", temp_threshold);
            send_ack_to_cloud("Temperature threshold updated");
        } else if (strncmp(data->valuestring, "SET HUM_THRESHOLD ", 18) == 0) {
            hum_threshold = atoi(data->valuestring + 18);
            LOG_INF("Updated humidity threshold: %d%%", hum_threshold);
            send_ack_to_cloud("Humidity threshold updated");
        } else {
            LOG_WRN("Unknown command received");
        }
    }

    cJSON_Delete(json);
}

/* Callback function for nRF Cloud messages */
static void cloud_event_handler(const struct nrf_cloud_evt *evt) {
    switch (evt->type) {
    case NRF_CLOUD_EVT_RX_DATA_GENERAL:
        if (evt->data.msg.buf && evt->data.msg.len > 0) {
            LOG_INF("Received cloud message: %.*s", evt->data.msg.len, evt->data.msg.buf);
            process_terminal_message(evt->data.msg.buf);
        }
        break;
    default:
        break;
    }
}

/* Main application entry */
int main(void) {
    int ret;

    LOG_INF("Initializing nRF Cloud Terminal Example...");

    ret = nrf_modem_lib_init();
    if (ret) {
        LOG_ERR("Modem initialization failed, error: %d", ret);
        return 1;
    }

    ret = lte_lc_init_and_connect();
    if (ret) {
        LOG_ERR("Failed to connect to LTE network, error: %d", ret);
        return 1;
    }

    ret = nrf_cloud_init(cloud_event_handler);
    if (ret) {
        LOG_ERR("Failed to initialize nRF Cloud, error: %d", ret);
        return 1;
    }

    LOG_INF("Waiting for messages from nRF Cloud Terminal...");

    while (1) {
        k_sleep(K_MSEC(500));
    }

    return 0;
}

